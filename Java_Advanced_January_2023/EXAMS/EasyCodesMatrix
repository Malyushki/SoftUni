1. Fill String matrix, Scanner разделени по интервал:

 private static void fillMatrix(String[][] matrix, Scanner scanner) {
        for (int row = 0; row < matrix.length; row++) {
            matrix[row] = scanner.nextLine().split("\\s+");
        }
    }

    _________________________________________________________________
    2. Print Matrix:
      private static void printMatrix(String[][] matrix) {
            for (String[] element : matrix) {
                System.out.println(Arrays.toString(element).replaceAll("[\\[\\],]", ""));
            }
        }

    _______________________________________________________________________
    3. Намиране на кординати на елемент в матрица.

     private static int[] findElementInMatrix(String[][] matrix, String element) {
            int[] coordinates = new int[2];
            for (int row = 0; row < matrix.length; row++) {
                for (int col = 0; col < matrix[0].length; col++) {
                    if (matrix[row][col].equals(element)) {
                        coordinates[0] = row;
                        coordinates[1] = col;
                    }
                }
            }

            return coordinates;
        }

        4. Прверка на границите на матрицата:

        private static boolean isInBoundaries(String[][] matrix, int row, int col) {
                return (row >= 0 && row < matrix.length) && (col >= 0 && col < matrix[row].length);
            }

           ______________________________________
 5. Движение на обект:

     private static int[] playerMovement(String[][] matrix, int row, int col, String direction) {
         int[] coordinates = new int[2];
            switch (direction) {
             case "up":
                 if (isInBoundaries(matrix, row - 1, col)) {
                     row = row - 1;
                 } else {
                     row = matrix[0].length - 1;
                 }
                 break;
             case "down":
                 if (isInBoundaries(matrix, row + 1, col)) {
                     row = row + 1;
                 } else {
                     row = 0;
                 }
                 break;
             case "left":
                 if (isInBoundaries(matrix, row, col - 1)) {
                     col = col - 1;
                 } else {
                     col = matrix.length - 1;
                 }
                 break;
             case "right":
                 if (isInBoundaries(matrix, row, col + 1)) {
                     col = col + 1;
                 } else {
                     col = 0;
                 }

                 break;
         }
         coordinates[0] = row;
         coordinates[1] = col;
         return coordinates;
     }
